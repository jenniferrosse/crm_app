  # def search
  #   if params[:search].present?
  #       @commercial_leads = CommercialLead.search(params[:search])
  #   else
  #       @commercial_leads = CommercialLead.all.order('follow_up DESC, updated_at ASC')
  #   end
  # end

  def index
    # if params[:source]
    #   @commercial_leads = CommercialLead.where(:source => params[:source])
    #   if @commercial_leads.empty?
    #   flash[:error] = "There are <b>#{@commercial_leads.count}</b> from this source".html_safe
    #   else
    #   flash[:notice] = "There are <b>#{@commercial_leads.count}</b> from this source".html_safe
    #   end
    # elsif params[:status]
    #   @commercial_leads = CommercialLead.where(:status => params[:status])
    #   if @commercial_leads.empty?
    #   flash[:error] = "There are <b>#{@commercial_leads.count}</b> in this category".html_safe
    #   else
    #   flash[:notice] = "There are <b>#{@commercial_leads.count}</b> in this category".html_safe
    #   end
    # elsif params[:follow_up]
    #   @commercial_leads = CommercialLead.where(:follow_up => params[:follow_up])
    #   if @commercial_leads.empty?
    #   flash[:error] = "There are <b>#{@commercial_leads.count}</b> in this category".html_safe
    #   else
    #   flash[:notice] = "There are <b>#{@commercial_leads.count}</b> in this category".html_safe
    #   end
    # else
      @commercial_leads = CommercialLead.order(sort_column + " " + sort_direction).order('contact_date ASC')
          respond_to do |format|
            format.html
            format.csv { render text: @commercial_leads.to_csv }
            format.xls { send_data @commercial_leads.to_csv(col_sep: "\t") }
          end
    #end
  end